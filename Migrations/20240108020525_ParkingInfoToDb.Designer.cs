// <auto-generated />
using System;
using CycleParkingViewer.DataM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CycleParkingViewer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240108020525_ParkingInfoToDb")]
    partial class ParkingInfoToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CycleParkingViewer.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CycleParkingViewer.Models.ParkingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CapacityNo")
                        .HasColumnType("int");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("ParkingTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Secure")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParkingTypeId");

                    b.ToTable("ParkingInfos");
                });

            modelBuilder.Entity("CycleParkingViewer.Models.ParkingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ParkingTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParkingTypes");
                });

            modelBuilder.Entity("CycleParkingViewer.Models.ParkingInfo", b =>
                {
                    b.HasOne("CycleParkingViewer.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CycleParkingViewer.Models.ParkingType", "Type")
                        .WithMany()
                        .HasForeignKey("ParkingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
